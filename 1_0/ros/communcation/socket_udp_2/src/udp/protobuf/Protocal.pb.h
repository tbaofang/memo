// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocal.proto

#ifndef PROTOBUF_Protocal_2eproto__INCLUDED
#define PROTOBUF_Protocal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class PBindName;
class PBindNameDefaultTypeInternal;
extern PBindNameDefaultTypeInternal _PBindName_default_instance_;
class PChat;
class PChatDefaultTypeInternal;
extern PChatDefaultTypeInternal _PChat_default_instance_;
class PRoomInformation;
class PRoomInformationDefaultTypeInternal;
extern PRoomInformationDefaultTypeInternal _PRoomInformation_default_instance_;

namespace protobuf_Protocal_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Protocal_2eproto

// ===================================================================

class PBindName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PBindName) */ {
 public:
  PBindName();
  virtual ~PBindName();

  PBindName(const PBindName& from);

  inline PBindName& operator=(const PBindName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PBindName(PBindName&& from) noexcept
    : PBindName() {
    *this = ::std::move(from);
  }

  inline PBindName& operator=(PBindName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBindName& default_instance();

  static inline const PBindName* internal_default_instance() {
    return reinterpret_cast<const PBindName*>(
               &_PBindName_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PBindName* other);
  friend void swap(PBindName& a, PBindName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PBindName* New() const PROTOBUF_FINAL { return New(NULL); }

  PBindName* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PBindName& from);
  void MergeFrom(const PBindName& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PBindName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:PBindName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct protobuf_Protocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PChat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PChat) */ {
 public:
  PChat();
  virtual ~PChat();

  PChat(const PChat& from);

  inline PChat& operator=(const PChat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PChat(PChat&& from) noexcept
    : PChat() {
    *this = ::std::move(from);
  }

  inline PChat& operator=(PChat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PChat& default_instance();

  static inline const PChat* internal_default_instance() {
    return reinterpret_cast<const PChat*>(
               &_PChat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PChat* other);
  friend void swap(PChat& a, PChat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PChat* New() const PROTOBUF_FINAL { return New(NULL); }

  PChat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PChat& from);
  void MergeFrom(const PChat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PChat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string information = 1;
  void clear_information();
  static const int kInformationFieldNumber = 1;
  const ::std::string& information() const;
  void set_information(const ::std::string& value);
  #if LANG_CXX11
  void set_information(::std::string&& value);
  #endif
  void set_information(const char* value);
  void set_information(const char* value, size_t size);
  ::std::string* mutable_information();
  ::std::string* release_information();
  void set_allocated_information(::std::string* information);

  // @@protoc_insertion_point(class_scope:PChat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr information_;
  mutable int _cached_size_;
  friend struct protobuf_Protocal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PRoomInformation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PRoomInformation) */ {
 public:
  PRoomInformation();
  virtual ~PRoomInformation();

  PRoomInformation(const PRoomInformation& from);

  inline PRoomInformation& operator=(const PRoomInformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PRoomInformation(PRoomInformation&& from) noexcept
    : PRoomInformation() {
    *this = ::std::move(from);
  }

  inline PRoomInformation& operator=(PRoomInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PRoomInformation& default_instance();

  static inline const PRoomInformation* internal_default_instance() {
    return reinterpret_cast<const PRoomInformation*>(
               &_PRoomInformation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PRoomInformation* other);
  friend void swap(PRoomInformation& a, PRoomInformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PRoomInformation* New() const PROTOBUF_FINAL { return New(NULL); }

  PRoomInformation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PRoomInformation& from);
  void MergeFrom(const PRoomInformation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PRoomInformation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string information = 2;
  void clear_information();
  static const int kInformationFieldNumber = 2;
  const ::std::string& information() const;
  void set_information(const ::std::string& value);
  #if LANG_CXX11
  void set_information(::std::string&& value);
  #endif
  void set_information(const char* value);
  void set_information(const char* value, size_t size);
  ::std::string* mutable_information();
  ::std::string* release_information();
  void set_allocated_information(::std::string* information);

  // @@protoc_insertion_point(class_scope:PRoomInformation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr information_;
  mutable int _cached_size_;
  friend struct protobuf_Protocal_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PBindName

// string name = 1;
inline void PBindName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBindName::name() const {
  // @@protoc_insertion_point(field_get:PBindName.name)
  return name_.GetNoArena();
}
inline void PBindName::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PBindName.name)
}
#if LANG_CXX11
inline void PBindName::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PBindName.name)
}
#endif
inline void PBindName::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PBindName.name)
}
inline void PBindName::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PBindName.name)
}
inline ::std::string* PBindName::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:PBindName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBindName::release_name() {
  // @@protoc_insertion_point(field_release:PBindName.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBindName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:PBindName.name)
}

// -------------------------------------------------------------------

// PChat

// string information = 1;
inline void PChat::clear_information() {
  information_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PChat::information() const {
  // @@protoc_insertion_point(field_get:PChat.information)
  return information_.GetNoArena();
}
inline void PChat::set_information(const ::std::string& value) {
  
  information_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PChat.information)
}
#if LANG_CXX11
inline void PChat::set_information(::std::string&& value) {
  
  information_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PChat.information)
}
#endif
inline void PChat::set_information(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  information_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PChat.information)
}
inline void PChat::set_information(const char* value, size_t size) {
  
  information_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PChat.information)
}
inline ::std::string* PChat::mutable_information() {
  
  // @@protoc_insertion_point(field_mutable:PChat.information)
  return information_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PChat::release_information() {
  // @@protoc_insertion_point(field_release:PChat.information)
  
  return information_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PChat::set_allocated_information(::std::string* information) {
  if (information != NULL) {
    
  } else {
    
  }
  information_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), information);
  // @@protoc_insertion_point(field_set_allocated:PChat.information)
}

// -------------------------------------------------------------------

// PRoomInformation

// string name = 1;
inline void PRoomInformation::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PRoomInformation::name() const {
  // @@protoc_insertion_point(field_get:PRoomInformation.name)
  return name_.GetNoArena();
}
inline void PRoomInformation::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PRoomInformation.name)
}
#if LANG_CXX11
inline void PRoomInformation::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PRoomInformation.name)
}
#endif
inline void PRoomInformation::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PRoomInformation.name)
}
inline void PRoomInformation::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PRoomInformation.name)
}
inline ::std::string* PRoomInformation::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:PRoomInformation.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PRoomInformation::release_name() {
  // @@protoc_insertion_point(field_release:PRoomInformation.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PRoomInformation::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:PRoomInformation.name)
}

// string information = 2;
inline void PRoomInformation::clear_information() {
  information_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PRoomInformation::information() const {
  // @@protoc_insertion_point(field_get:PRoomInformation.information)
  return information_.GetNoArena();
}
inline void PRoomInformation::set_information(const ::std::string& value) {
  
  information_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PRoomInformation.information)
}
#if LANG_CXX11
inline void PRoomInformation::set_information(::std::string&& value) {
  
  information_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PRoomInformation.information)
}
#endif
inline void PRoomInformation::set_information(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  information_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PRoomInformation.information)
}
inline void PRoomInformation::set_information(const char* value, size_t size) {
  
  information_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PRoomInformation.information)
}
inline ::std::string* PRoomInformation::mutable_information() {
  
  // @@protoc_insertion_point(field_mutable:PRoomInformation.information)
  return information_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PRoomInformation::release_information() {
  // @@protoc_insertion_point(field_release:PRoomInformation.information)
  
  return information_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PRoomInformation::set_allocated_information(::std::string* information) {
  if (information != NULL) {
    
  } else {
    
  }
  information_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), information);
  // @@protoc_insertion_point(field_set_allocated:PRoomInformation.information)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Protocal_2eproto__INCLUDED
